#version 430

in vec4 Position;
in vec3 Normal;
in vec2 Texcoord;

struct LightInfo {
    vec4 Position;  // Light position in eye coords
    vec3 Intensity; // Light intensity
};

uniform LightInfo Light;

struct MaterialInfo {
    vec3  Ka;        // Ambient  reflectivity
    vec3  Kd;        // Diffuse  reflectivity
    vec3  Ks;        // Specular reflectivity
    float Shininess; // Specular shininess factor
};

uniform MaterialInfo Material;

out vec4 FragColor;

vec3 phongModel( vec4 position, vec3 normal) {
    vec3 s         = normalize(vec3(Light.Position - position));
    vec3 v         = normalize(-position.xyz); // In eyeCoords, the viewer is at the origin -> only take negation of eyeCoords vector
    vec3 r         = reflect (-s, normal);

    float sDotN    = max(dot(s, normal), 0.0);

    vec3  ambient  = Material.Ka;
    vec3  diffuse  = Material.Kd * sDotN;
    vec3  spec     = vec3(0.0);
    if (sDotN > 0.0) {
        spec = Material.Ks * pow(max(dot(r,v), 0.0), Material.Shininess);
    }

    return Light.Intensity * (ambient + diffuse + spec);
}


void main()
{
    if( gl_FrontFacing ) {
        FragColor = vec4(phongModel(Position, Normal), 1.0);
        //FragColor = vec4(1.0, 0.0, 0.0, 1.0);
    } else {
        FragColor = vec4(phongModel(Position, -Normal), 1.0);
        //FragColor = vec4(0.0, 1.0, 0.0, 1.0);
    }
}
